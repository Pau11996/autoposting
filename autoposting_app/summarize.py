from typing import List, Optional

from openai import OpenAI


SYSTEM_PROMPT_ENGLISH = (
    "You are a professional finance and technology news analyst creating engaging content for a Telegram audience. "
    "Write in a conversational, accessible tone that makes complex business news easy to understand. "
    "Use engaging headlines and focus on the human impact and practical implications of news stories."
)

SYSTEM_PROMPT_RUSSIAN = (
    "–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, —Å–æ–∑–¥–∞—é—â–∏–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ Telegram. "
    "–ü–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º, –¥–æ—Å—Ç—É–ø–Ω–æ–º —Ç–æ–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–Ω–æ–≤–æ—Å—Ç–∏ –ª–µ–≥–∫–∏–º–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è. "
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
)


def build_article_prompt(items: List[dict], language: str = "english") -> str:
    bullet_lines = []
    for idx, item in enumerate(items, start=1):
        line = f"{idx}. {item['title']} ‚Äî {item.get('link', '')}"
        if item.get("content"):
            line += f"\nContent: {item['content'][:1500]}"
        bullet_lines.append(line)
    
    if language.lower() == "russian":
        prompt = (
            "–°–æ–∑–¥–∞–π—Ç–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤/–±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ Telegram. "
            "–§–æ—Ä–º–∞—Ç: 4-6 –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å:\n"
            "‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–æ–¥–∑–∏\n"
            "‚Ä¢ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –æ–±—ä—è—Å–Ω—è—é—â–∏–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ\n"
            "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –≤–º–µ—Å—Ç–µ\n"
            "‚Ä¢ –§–æ–∫—É—Å –Ω–∞ —Ä–∞—É–Ω–¥–∞—Ö —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞—Ö, —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É–¥–æ–±–Ω—ã–º –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–µ –ø–æ–ª–Ω—ã–π URL) –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞\n"
            "‚Ä¢ –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n\n"
            + "\n\n".join(bullet_lines)
        )
    else:
        prompt = (
            "Create an engaging summary of the following startup/business news for a Telegram audience. "
            "Format as 4-6 news items, each with:\n"
            "‚Ä¢ A compelling headline with relevant emoji\n"
            "‚Ä¢ 2-3 sentences explaining the key facts and why it matters\n"
            "‚Ä¢ Use emojis strategically to enhance readability\n"
            "‚Ä¢ Group similar stories together\n"
            "‚Ä¢ Focus on funding rounds, product launches, partnerships, market trends, and leadership changes\n"
            "‚Ä¢ Make it scannable and engaging for busy professionals\n"
            "‚Ä¢ Include the source domain (not full URL) in brackets after each item\n\n"
            + "\n\n".join(bullet_lines)
        )
    return prompt


def summarize_items(
    items: List[dict],
    api_key: Optional[str],
    model: str,
    base_url: Optional[str] = None,
    offline: bool = False,
    language: str = "english",
) -> str:
    if offline or not api_key:
        # Fallback summary without LLM - make it more user-friendly
        bullets = []
        for idx, item in enumerate(items, 1):
            # Add simple emoji based on content keywords
            title_lower = item['title'].lower()
            emoji = "üìà" if any(word in title_lower for word in ['funding', 'raised', 'investment', '—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']) else \
                   "üöÄ" if any(word in title_lower for word in ['launch', 'release', 'debut', '–∑–∞–ø—É—Å–∫', '—Ä–µ–ª–∏–∑']) else \
                   "ü§ù" if any(word in title_lower for word in ['partnership', 'deal', 'acquisition', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '—Å–¥–µ–ª–∫–∞']) else \
                   "üíº"
            
            # Extract domain from URL for cleaner display
            link = item.get('link', '')
            try:
                from urllib.parse import urlparse
                domain = urlparse(link).netloc.replace('www.', '')
            except:
                domain = link
            
            if language.lower() == "russian":
                # Simple translation for common business terms in headlines
                title = item['title']
                # Note: This is basic keyword replacement. For full translation, API is needed.
                bullets.append(f"{emoji} <b>{title}</b>\n   [{domain}]")
            else:
                bullets.append(f"{emoji} <b>{item['title']}</b>\n   [{domain}]")
        
        return "\n\n".join(bullets)

    client = OpenAI(api_key=api_key, base_url=base_url) if base_url else OpenAI(api_key=api_key)

    user_prompt = build_article_prompt(items, language)
    
    # Select appropriate system prompt based on language
    system_prompt = SYSTEM_PROMPT_RUSSIAN if language.lower() == "russian" else SYSTEM_PROMPT_ENGLISH

    completion = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        temperature=0.4,  # Slightly more creative for engaging content
        max_tokens=800,   # More space for detailed, well-formatted content
    )
    text = completion.choices[0].message.content.strip()
    return text
